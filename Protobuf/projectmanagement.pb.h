// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projectmanagement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_projectmanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_projectmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_projectmanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_projectmanagement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_projectmanagement_2eproto;
namespace projectmanagement {
class Developer;
class DeveloperDefaultTypeInternal;
extern DeveloperDefaultTypeInternal _Developer_default_instance_;
class Project;
class ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
}  // namespace projectmanagement
PROTOBUF_NAMESPACE_OPEN
template<> ::projectmanagement::Developer* Arena::CreateMaybeMessage<::projectmanagement::Developer>(Arena*);
template<> ::projectmanagement::Project* Arena::CreateMaybeMessage<::projectmanagement::Project>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace projectmanagement {

// ===================================================================

class Developer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:projectmanagement.Developer) */ {
 public:
  inline Developer() : Developer(nullptr) {};
  virtual ~Developer();

  Developer(const Developer& from);
  Developer(Developer&& from) noexcept
    : Developer() {
    *this = ::std::move(from);
  }

  inline Developer& operator=(const Developer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Developer& operator=(Developer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Developer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Developer* internal_default_instance() {
    return reinterpret_cast<const Developer*>(
               &_Developer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Developer& a, Developer& b) {
    a.Swap(&b);
  }
  inline void Swap(Developer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Developer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Developer* New() const final {
    return CreateMaybeMessage<Developer>(nullptr);
  }

  Developer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Developer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Developer& from);
  void MergeFrom(const Developer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Developer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "projectmanagement.Developer";
  }
  protected:
  explicit Developer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projectmanagement_2eproto);
    return ::descriptor_table_projectmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // required string first_name = 1;
  bool has_first_name() const;
  private:
  bool _internal_has_first_name() const;
  public:
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_first_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_first_name(
      std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // required string last_name = 2;
  bool has_last_name() const;
  private:
  bool _internal_has_last_name() const;
  public:
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_name(
      std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // required string email = 3;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:projectmanagement.Developer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  friend struct ::TableStruct_projectmanagement_2eproto;
};
// -------------------------------------------------------------------

class Project PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:projectmanagement.Project) */ {
 public:
  inline Project() : Project(nullptr) {};
  virtual ~Project();

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Project& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const final {
    return CreateMaybeMessage<Project>(nullptr);
  }

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "projectmanagement.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projectmanagement_2eproto);
    return ::descriptor_table_projectmanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeveloperFieldNumber = 3,
    kTitleFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // repeated .projectmanagement.Developer developer = 3;
  int developer_size() const;
  private:
  int _internal_developer_size() const;
  public:
  void clear_developer();
  ::projectmanagement::Developer* mutable_developer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectmanagement::Developer >*
      mutable_developer();
  private:
  const ::projectmanagement::Developer& _internal_developer(int index) const;
  ::projectmanagement::Developer* _internal_add_developer();
  public:
  const ::projectmanagement::Developer& developer(int index) const;
  ::projectmanagement::Developer* add_developer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectmanagement::Developer >&
      developer() const;

  // required string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:projectmanagement.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectmanagement::Developer > developer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_projectmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Developer

// required string first_name = 1;
inline bool Developer::_internal_has_first_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Developer::has_first_name() const {
  return _internal_has_first_name();
}
inline void Developer::clear_first_name() {
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Developer::first_name() const {
  // @@protoc_insertion_point(field_get:projectmanagement.Developer.first_name)
  return _internal_first_name();
}
inline void Developer::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:projectmanagement.Developer.first_name)
}
inline std::string* Developer::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:projectmanagement.Developer.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& Developer::_internal_first_name() const {
  return first_name_.Get();
}
inline void Developer::_internal_set_first_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Developer::set_first_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:projectmanagement.Developer.first_name)
}
inline void Developer::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:projectmanagement.Developer.first_name)
}
inline void Developer::set_first_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:projectmanagement.Developer.first_name)
}
inline std::string* Developer::_internal_mutable_first_name() {
  _has_bits_[0] |= 0x00000001u;
  return first_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Developer::release_first_name() {
  // @@protoc_insertion_point(field_release:projectmanagement.Developer.first_name)
  if (!_internal_has_first_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return first_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Developer::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:projectmanagement.Developer.first_name)
}
inline std::string* Developer::unsafe_arena_release_first_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:projectmanagement.Developer.first_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return first_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Developer::unsafe_arena_set_allocated_first_name(
    std::string* first_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (first_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      first_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:projectmanagement.Developer.first_name)
}

// required string last_name = 2;
inline bool Developer::_internal_has_last_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Developer::has_last_name() const {
  return _internal_has_last_name();
}
inline void Developer::clear_last_name() {
  last_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Developer::last_name() const {
  // @@protoc_insertion_point(field_get:projectmanagement.Developer.last_name)
  return _internal_last_name();
}
inline void Developer::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:projectmanagement.Developer.last_name)
}
inline std::string* Developer::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:projectmanagement.Developer.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& Developer::_internal_last_name() const {
  return last_name_.Get();
}
inline void Developer::_internal_set_last_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Developer::set_last_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:projectmanagement.Developer.last_name)
}
inline void Developer::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:projectmanagement.Developer.last_name)
}
inline void Developer::set_last_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:projectmanagement.Developer.last_name)
}
inline std::string* Developer::_internal_mutable_last_name() {
  _has_bits_[0] |= 0x00000002u;
  return last_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Developer::release_last_name() {
  // @@protoc_insertion_point(field_release:projectmanagement.Developer.last_name)
  if (!_internal_has_last_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Developer::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:projectmanagement.Developer.last_name)
}
inline std::string* Developer::unsafe_arena_release_last_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:projectmanagement.Developer.last_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return last_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Developer::unsafe_arena_set_allocated_last_name(
    std::string* last_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:projectmanagement.Developer.last_name)
}

// required string email = 3;
inline bool Developer::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Developer::has_email() const {
  return _internal_has_email();
}
inline void Developer::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Developer::email() const {
  // @@protoc_insertion_point(field_get:projectmanagement.Developer.email)
  return _internal_email();
}
inline void Developer::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:projectmanagement.Developer.email)
}
inline std::string* Developer::mutable_email() {
  // @@protoc_insertion_point(field_mutable:projectmanagement.Developer.email)
  return _internal_mutable_email();
}
inline const std::string& Developer::_internal_email() const {
  return email_.Get();
}
inline void Developer::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Developer::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:projectmanagement.Developer.email)
}
inline void Developer::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:projectmanagement.Developer.email)
}
inline void Developer::set_email(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:projectmanagement.Developer.email)
}
inline std::string* Developer::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000004u;
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Developer::release_email() {
  // @@protoc_insertion_point(field_release:projectmanagement.Developer.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Developer::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:projectmanagement.Developer.email)
}
inline std::string* Developer::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:projectmanagement.Developer.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Developer::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:projectmanagement.Developer.email)
}

// -------------------------------------------------------------------

// Project

// required string title = 1;
inline bool Project::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Project::has_title() const {
  return _internal_has_title();
}
inline void Project::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Project::title() const {
  // @@protoc_insertion_point(field_get:projectmanagement.Project.title)
  return _internal_title();
}
inline void Project::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:projectmanagement.Project.title)
}
inline std::string* Project::mutable_title() {
  // @@protoc_insertion_point(field_mutable:projectmanagement.Project.title)
  return _internal_mutable_title();
}
inline const std::string& Project::_internal_title() const {
  return title_.Get();
}
inline void Project::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:projectmanagement.Project.title)
}
inline void Project::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:projectmanagement.Project.title)
}
inline void Project::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:projectmanagement.Project.title)
}
inline std::string* Project::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_title() {
  // @@protoc_insertion_point(field_release:projectmanagement.Project.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:projectmanagement.Project.title)
}
inline std::string* Project::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:projectmanagement.Project.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:projectmanagement.Project.title)
}

// optional string url = 2;
inline bool Project::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Project::has_url() const {
  return _internal_has_url();
}
inline void Project::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Project::url() const {
  // @@protoc_insertion_point(field_get:projectmanagement.Project.url)
  return _internal_url();
}
inline void Project::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:projectmanagement.Project.url)
}
inline std::string* Project::mutable_url() {
  // @@protoc_insertion_point(field_mutable:projectmanagement.Project.url)
  return _internal_mutable_url();
}
inline const std::string& Project::_internal_url() const {
  return url_.Get();
}
inline void Project::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:projectmanagement.Project.url)
}
inline void Project::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:projectmanagement.Project.url)
}
inline void Project::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:projectmanagement.Project.url)
}
inline std::string* Project::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_url() {
  // @@protoc_insertion_point(field_release:projectmanagement.Project.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:projectmanagement.Project.url)
}
inline std::string* Project::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:projectmanagement.Project.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:projectmanagement.Project.url)
}

// repeated .projectmanagement.Developer developer = 3;
inline int Project::_internal_developer_size() const {
  return developer_.size();
}
inline int Project::developer_size() const {
  return _internal_developer_size();
}
inline void Project::clear_developer() {
  developer_.Clear();
}
inline ::projectmanagement::Developer* Project::mutable_developer(int index) {
  // @@protoc_insertion_point(field_mutable:projectmanagement.Project.developer)
  return developer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectmanagement::Developer >*
Project::mutable_developer() {
  // @@protoc_insertion_point(field_mutable_list:projectmanagement.Project.developer)
  return &developer_;
}
inline const ::projectmanagement::Developer& Project::_internal_developer(int index) const {
  return developer_.Get(index);
}
inline const ::projectmanagement::Developer& Project::developer(int index) const {
  // @@protoc_insertion_point(field_get:projectmanagement.Project.developer)
  return _internal_developer(index);
}
inline ::projectmanagement::Developer* Project::_internal_add_developer() {
  return developer_.Add();
}
inline ::projectmanagement::Developer* Project::add_developer() {
  // @@protoc_insertion_point(field_add:projectmanagement.Project.developer)
  return _internal_add_developer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::projectmanagement::Developer >&
Project::developer() const {
  // @@protoc_insertion_point(field_list:projectmanagement.Project.developer)
  return developer_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace projectmanagement

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_projectmanagement_2eproto
